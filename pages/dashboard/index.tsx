import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { prisma } from '../../lib/prisma';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';


interface FormData {
  name: string;
  idp: string;
  quantity: string;
  description: string;
  id: string;
}

interface Parts {
  parts: {
    id: string;
    name: string;
    idp: string;
    quantity: string;
    description: string;
  }[];
}

const Home: NextPage<Parts> = ({ parts }) => {
  const [form, setForm] = useState<FormData>({
    name: '',
    idp: '',
    quantity: '',
    description: '',
    id: '',
  });
  const [newPart, setNewPart] = useState(true);
  const router = useRouter();
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const refreshData = () => {
    router.replace(router.asPath)
  }
  
  function openEditModal(part: FormData) {
    setForm(part);
    setIsEditModalOpen(true);
  }

  function closeEditModal() {
    setIsEditModalOpen(false);
    setForm({
      name: '',
      idp: '',
      quantity: '',
      description: '',
      id: '',
    });
    setNewPart(true);
  }

  async function handleSubmit(data: FormData) {
    try {
      if (newPart) {
        if (data.name && data.idp) {
          // CREATE logic
          fetch('api/partcreate', {
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json',
            },
            method: 'POST',
          }).then(() => {
            setForm({
              name: '',
              idp: '',
              quantity: '',
              description: '',
              id: '',
            });
            refreshData();
            router.push('/dashboard');
          });
        } else {
          alert('Part Name and ID can not be blank');
        }
      } else {
        // UPDATE logic
        fetch(`api/part/${data.id}`, {
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'PUT',
        }).then(() => {
          setForm({
            name: '',
            idp: '',
            quantity: '',
            description: '',
            id: '',
          });
          setNewPart(true);
          refreshData();
          router.push('/dashboard');
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function updatePart(
    name: string,
    idp: string,
    quantity: string,
    description: string,
    id: string
  ) {
    setForm({ name, idp, quantity, description, id });
    setNewPart(false);
    openEditModal({
      name,
      idp,
      quantity,
      description,
      id,
    });
  }
  

  async function deletePart(id: string) {
    try {
        fetch(`api/part/${id}`, {
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'DELETE'
        }).then(() => {
          refreshData()
        })
      } catch (error) {
        console.log(error)
      }    
  }

  function handleCancel() {
    setForm({
      name: '',
      idp: '',
      quantity: '',
      description: '',
      id: '',
    });
    setNewPart(true);
  }

  return (
    <div className="">
      <Head>
        <title>Parts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

    <div className="bg-gray-100 min-h-screen">
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-center font-bold text-2xl my-4">Parts</h1>
      <table className="w-full bg-white shadow-md rounded-md">
      <thead>
          <tr>
            <th>NO</th>
            <th>Part Name</th>
            <th>Part ID</th>
            <th>Quantity</th>
            <th>Description</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {parts.map((part) => (
            <tr key={part.id}>
              <td>{part.id}</td>
              <td>{part.name}</td>
              <td>{part.idp}</td>
              <td>{part.quantity}</td>
              <td>{part.description}</td>
              <td>
                <button onClick={() => updatePart(part.name, part.idp, part.quantity, part.description, part.id)}>Edit</button>
                <button onClick={() => deletePart(part.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {isEditModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
          <div className="bg-white shadow-md p-4 rounded-md">
            <form
              className="space-y-4"
              onSubmit={e => {
                e.preventDefault();
                handleSubmit(form);
                closeEditModal();
              }}
            >
                   <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                    Part Name
                  </label>
                  <input
                    type="text"
                    id="name"
                    placeholder="Part Name"
                    value={form.name}
                    onChange={e => setForm({ ...form, name: e.target.value })}
                    className="border rounded-md px-3 py-2 w-full"
                  />
                </div>
                <div>
                  <label htmlFor="idp" className="block text-sm font-medium text-gray-700">
                    Part ID
                  </label>
                  <input
                    type="text"
                    id="idp"
                    placeholder="Part ID"
                    value={form.idp}
                    onChange={e => setForm({ ...form, idp: e.target.value })}
                    className="border rounded-md px-3 py-2 w-full"
                  />
                </div>
                <div>
                  <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">
                    Quantity
                  </label>
                  <input
                    type="number"
                    id="quantity"
                    placeholder="Quantity"
                    value={form.quantity}
                    onChange={e => setForm({ ...form, quantity: e.target.value })}
                    className="border rounded-md px-3 py-2 w-full"
                  />
                </div>
                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                    Description
                  </label>
                  <textarea
                    id="description"
                    placeholder="Description"
                    value={form.description}
                    onChange={e => setForm({ ...form, description: e.target.value })}
                    className="border rounded-md px-3 py-2 w-full"
                  />
                </div>
              <div className="flex justify-end">
                <button type="submit" className="bg-blue-500 text-white rounded px-4 py-2">
                  Save
                </button>
                <button type="button" onClick={closeEditModal} className="ml-2 bg-gray-300 rounded px-4 py-2">
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  </div>
  </div>
);
}

export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
    // READ all parts from DB
    const parts = await prisma?.part.findMany({
      select: {
        name: true,
        idp: true,
        id: true,
        quantity: true,
        description: true,
      }
    });
  
    return {
      props: {
        parts: parts || [], // Ensure that parts is initialized even if it's null
      }
    };
  };
  