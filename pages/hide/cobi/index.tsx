import type { NextPage } from 'next'
import Head from 'next/head'
import { useState,  useEffect } from 'react'
import { prisma } from '../../lib/prisma'
import { GetServerSideProps } from 'next'
import { useRouter } from 'next/router'


interface FormData {
  id: string;
  devname: string;
  devid: string;
  devtype: string;
  deveui: string;
  brandId: string;
}

// Array interface
interface Iots {
  iots: {
    id: string;
    devname: string;
    devid: string;
    devtype: string;
    deveui: string;
    brandId: string;
  }[];
  brands: {
    id: string;
    name: string;
    bid: string;
  }[];
}




// 从 getServerSideProps 服务器端渲染加载笔记
// Load Iots from getServerSideProps server side rendering
const Home: NextPage<Iots> = ({ iots, brands }) => {
  const [form, setForm] = useState<FormData>({
    id:'',
    devname:'',
    devid:'',
    devtype:'',
    deveui:'',
    brandId:'',})
  const [newIot, setNewIot] = useState<Boolean>(true)
  const router = useRouter()

  const refreshData = () => {
    router.replace(router.asPath)
  }

  async function handleSubmit(data: FormData) {
    // console.log(data)
    // console.log(newIot)

    try {
      if (newIot) {
        // Check input is not blank
        if (data.devname && data.devid) {
          // CREATE
          fetch('api/iotcreate', {
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json'
            },
            method: 'POST'
          }).then(() => {
            setForm({
              id:'',
              devname:'',
              devid:'',
              devtype:'',
              deveui:'',
              brandId:'',})
            refreshData()
          })
        }
        else {
          alert("Iot Name and ID can not be blank")
        }
      }
      else {
        // UPDATE
          fetch(`api/iot/${data.id}`, {
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json',
            },
            method: 'PUT'
          }).then(() => {
            setForm({ 
              id:'',
              devname:'',
              devid:'',
              devtype:'',
              deveui:'',
              brandId:'',});
            setNewIot(true)
            refreshData()
          })
      }
    } catch (error) {
      console.log(error)
    }
  }

  async function updateIot(  devname:string,devid:string,devtype:string,deveui:string,brandId:string,id:string) {

    setForm({ 
      id,
      devname,
      devid,
      devtype,
      deveui,
      brandId})
    setNewIot(false)
  }
  

  async function deleteIot(id: string) {
    try {
      fetch(`api/iot/${id}`, {
        headers: {
          'Content-Type': 'application/json',
        },
        method: 'DELETE'
      }).then(() => {
        refreshData()
      })
    } catch (error) {
      console.log(error)
    }    
  }

  function handleCancel() {
    setForm({
      id:'',
      devname:'',
      devid:'',
      devtype:'',
      deveui:'',
      brandId:'',
    })
    setNewIot(true)
  }

  useEffect(() => {
    //table
    const filterTableFunc = () => {
    const filterResult = (document.getElementById("search") as HTMLInputElement).value.toLowerCase();
    const Table = document.getElementById("Data");
    if (Table) {
        const tr = Table.getElementsByTagName("tr");
        for (let i = 1; i < tr.length; i++) {
        const rowStyle = tr[i].style;
        if (rowStyle) {
            rowStyle.display = "none";
            const tdArray = tr[i].getElementsByTagName("td");
            for (let j = 0; j < tdArray.length; j++) {
            const tdText = tdArray[j].textContent;
            if (tdText && tdText.toLowerCase().indexOf(filterResult) > -1) {
                rowStyle.display = "";
                break;
            }
            }
        }
        }
    }
    };

    // Call the filtering function when the search input changes
    const searchInput = document.getElementById("search") as HTMLInputElement | null;
    if (searchInput) {
    searchInput.addEventListener("input", filterTableFunc);
    }

// Clean up the event listener when the component unmounts
return () => {
    if (searchInput) {
    searchInput.removeEventListener("input", filterTableFunc);
    }
};
}, []);

//sort function
useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://www.kryogenix.org/code/browser/sorttable/sorttable.js';
    script.async = true;
    document.body.appendChild(script);

    return () => {
    document.body.removeChild(script);
    };
}, []);

  return (
    <div className=''>
      <Head>
        <title>Iots</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <h1 className="text-center font-bold text-2xl m-4">Iots</h1>
      <form className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch" 
        onSubmit={e => {
          e.preventDefault()
          handleSubmit(form)
      }}>
          <div className="form">
            <div className="field field_v2">
              <label htmlFor="devname" className="w-1 h-1 p-0 border-0 absolute clip w-[1px] h-[1px] overflow-hidden">Iot Device Name</label>
              <input id="devname" type="text"
                placeholder="Iot Device Name"
                value={form.devname}
                onChange={(e) => setForm({ ...form, devname: e.target.value })}
                className="field__input"></input>
              <span className="absolute inset-0 pointer-events-none cursor-text field__label-wrap">
                <span className="field__label">Iot Device Name</span>
              </span>
            </div>

            <div className="field field_v2">
              <label htmlFor="devid" className="w-1 h-1 p-0 border-0 absolute clip w-[1px] h-[1px] overflow-hidden">Iot Device ID</label>
              <input type="text"
                placeholder="Iot device model id"
                id="devid"
                value={form.devid}
                onChange={(e) => setForm({ ...form, devid: e.target.value })}
                className="field__input"></input>
              <span className="field__label-wrap" aria-hidden="true">
                <span className="field__label">Iot Device ID</span>
              </span>
            </div>

            <label htmlFor="brandId" className="select_label">Brand</label>
            <select
              id="part-select"
              value={form.brandId}
              onChange={(e) => setForm({ ...form, brandId: e.target.value })}
              required
              className="block py-2.5 px-0 w-full text-m text-gray-500 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-white dark:border-gray-700 focus:outline-none focus:ring-0 focus:border-gray-200 peer placeholder-gray-400 text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            >
              <option className="bg-gray-600" value="">
                Choose a Brand
              </option>

              {brands.map((brand) => (
                <option key={brand.bid} value={brand.bid.toString()} className="bg-gray-600">
                  {brand.name}({brand.bid})
                </option>

              ))}
            </select>

          <div className="">
            <br></br>
            <label htmlFor="devtype" className="select_label">Type</label>
            <br></br>
            <select className="option" id="devtype" value={form.devtype}
              onChange={(e) => setForm({ ...form, devtype: e.target.value })}>
              <option value="">Select Option</option>
              <option value="Modbus Interface Device for Meter">Modbus Interface Device for Meter</option>
              <option value="Modbus Interface Device for Equipment">Modbus Interface Device for Equipment</option>
              <option value="Water Leak Sensor">Water Leak Sensor</option>
              <option value="IAQ Device">IAQ Device</option>
              <option value="Sound Level">Sound Level</option>
              <option value="Environmental Gas Sensor">Environmental Gas Sensor</option>
              <option value="People Counting Sensor">People Counting Sensor</option>
              <option value="Occupancy Sensor">Occupancy Sensor</option>
            </select>
          </div>

          <br></br>

          <div className="field field_v2">
            <label htmlFor="deveui" className="w-1 h-1 p-0 border-0 absolute clip w-[1px] h-[1px] overflow-hidden">Iot Device EUI</label>
            <input type="text"
              placeholder="Enter Iot device EUI"
              id="deveui"
              value={form.deveui}
              onChange={(e) => setForm({ ...form, deveui: e.target.value })}
              className="field__input"></input>
            <span className="field__label-wrap" aria-hidden="true">
              <span className="field__label">Iot Device EUI</span>
            </span>
          </div>
      </div>

        {newIot ? (
          <div className='anibtn'>
          <button type="submit" className="relative left-1/2 transform -translate-x-1/2 font-bold text-white bg-white border-3 border-black rounded-full w-44 h-11 text-center transition-all duration-350 hover:bg-black hover:text-white">
            <span>Add +</span>
            <div className="absolute top-0 left-0 w-full h-full bg-white rounded-full opacity-0 invisible transition-all duration-350 success">
              <svg
                xmlnsXlink="http://www.w3.org/1999/xlink"
                version="1.1"
                viewBox="0 0 29.756 29.756"
                xmlSpace="preserve"
                className="w-8 h-5 mx-auto mt-1 transform origin-center -translate-y-1/2 rotate-0 scale-0 transition-all duration-350"
              >
                <path
                  d="M29.049,5.009L28.19,4.151c-0.943-0.945-2.488-0.945-3.434,0L10.172,18.737l-5.175-5.173   c-0.943-0.944-2.489-0.944-3.432,0.001l-0.858,0.857c-0.943,0.944-0.943,2.489,0,3.433l7.744,7.752   c0.944,0.943,2.489,0.943,3.433,0L29.049,8.442C29.991,7.498,29.991,5.953,29.049,5.009z"
                />
              </svg>
            </div>
          </button>
          </div>
          ) : (
          <>
            <button type="submit" className="bg-blue-500 text-white rounded p-1">Update</button>
            <button onClick={handleCancel} className="bg-red-500 text-white rounded p-1">Cancel</button>
          </>
        )}
      </form>

      <div className="flex flex-col">
          <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div className="inline-block min-w-full py-2 sm:px-6 lg:px-8">
              <div className="overflow-hidden">
                <table className="min-w-full text-center text-sm font-light">
                  <thead className="border-b bg-neutral-800 font-medium text-white dark:border-neutral-500 dark:bg-neutral-900">
                    <tr>
                      <th scope="col" className="px-6 py-4">#</th>
                      <th scope="col" className="px-6 py-4">IOT Device name</th>
                      <th scope="col" className="px-6 py-4">IOT ID</th>
                      <th scope="col" className="px-6 py-4">IOT Type</th>
                      <th scope="col" className="px-6 py-4">Brand</th>
                      <th scope="col" className="px-6 py-4">EUI</th>
                    </tr>
                  </thead>
                  <tbody>
                      {iots.map((iot, index) => (
                      <tr key={iot.id} className="border-b dark:border-neutral-500">
                        {/* Index */}
                        <td className="whitespace-nowrap px-6 py-4 font-medium text-white">{index + 1}</td>
                          
                          {/* Basic Information */}
                          <td className="whitespace-nowrap px-6 py-4 text-white">{iot.devname}</td>
                          <td className="whitespace-nowrap px-6 py-4 text-white">{iot.devid}</td>
                          <td className="whitespace-nowrap px-6 py-4 text-white">{iot.devtype}</td>
                          <td className="whitespace-nowrap px-6 py-4 text-white">{iot.brandId}</td>
                          <td className="whitespace-nowrap px-6 py-4 text-white">{iot.deveui}</td>

                          <td className="flex justify-center space-x-1 whitespace-nowrap px-6 py-4">
                            <button onClick={() => updateIot(iot.devname, iot.devid, iot.devtype, iot.brandId,iot.deveui, iot.id)} className="bg-blue-500 px-3 text-white rounded">Edit</button>
                            <button onClick={() => deleteIot(iot.id)} className="bg-red-500 px-3 text-white rounded">				X</button>
                          </td> 
                        </tr>
                      ))}
                    </tbody>
                </table>
              </div>  
            </div>
          </div>
      <br/>
    </div>
  </div>
  )
}

export default Home

export const getServerSideProps: GetServerSideProps = async () => {
  const iots = await prisma?.iot.findMany({
    select: {
      id: true,
      devname: true,
      devid: true,
      devtype: true,
      deveui: true,
      brandId: true,
    },
  });

  const brands = await prisma?.brand.findMany({
    select: {
      id: true,
      name: true,
      bid: true,
    },
  });

  return {
    props: {
      iots: iots || [],
      brands: brands || [],
    },
  };
};
