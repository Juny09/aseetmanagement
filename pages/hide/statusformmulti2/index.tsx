import { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { prisma } from '../../lib/prisma';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';
import Modal from 'react-modal'; // Import the react-modal library
import 'react-modal/styles.css'; // Import CSS styles for the modal
import { useForm } from './hook';
import type { part } from '@prisma/client';


interface FormData {
  id: string;
  mstatus: string;
  category: string;
  from: string;
  to: string;
  performby: string;
  attach: string;
  estimateddate: string;
  warrantyinfo: string;
  comment: string;
  partId: string;
}

interface Status {
  status: {
    id: string;
    mstatus: string;
    category: string;
    from: string;
    to: string;
    performby: string;
    attach: string;
    estimateddate: string;
    warrantyinfo: string;
    comment: string;
    partId: string;
  }[];
}

const Home: NextPage<Status & { parts: part[]; noParts: boolean }> = ({
  status,
  parts,
  noParts,
}) => {
  const { step, form, setForm, nextStep, prevStep, resetForm } = useForm();
  const [newStatus, setNewStatus] = useState<Boolean>(true);
  const router = useRouter();
  const [isModalOpen, setIsModalOpen] = useState(false); // Manage the modal state

  const openModal = () => {
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const refreshData = () => {
    router.replace(router.asPath);
  };

  async function handleSubmit(data: FormData) {
    try {
      if (newStatus) {
        if (data.mstatus) {
          // CREATE
          fetch('api/statuscreate', {
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json',
            },
            method: 'POST',
          }).then(() => {
            setForm({
              id: '',
              mstatus: '',
              category: '',
              from: '',
              to: '',
              performby: '',
              attach: '',
              estimateddate: '',
              warrantyinfo: '',
              comment: '',
              partId: '',
            });
            refreshData();
            router.push('/statusdash'); // Redirect to the dashboard page
          });
        } else {
          alert('Part status cannot be blank');
        }
      } else {
        // UPDATE
        fetch(`api/status/${data.id}`, {
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'PUT',
        }).then(() => {
          setForm({
            id: '',
            mstatus: '',
            category: '',
            from: '',
            to: '',
            performby: '',
            attach: '',
            estimateddate: '',
            warrantyinfo: '',
            comment: '',
            partId: '',
          });
          setNewStatus(true);
          refreshData();
          router.push('/statusformmulticopy'); // Redirect to the dashboard page
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function updateStatus(
    id: string,
    mstatus: string,
    category: string,
    from: string,
    to: string,
    performby: string,
    attach: string,
    estimateddate: string,
    warrantyinfo: string,
    comment: string,
    partId: string
  ) {
    console.log('updateMstatus called'); // Add this line
    setForm({
      id,
      mstatus,
      category,
      from,
      to,
      performby,
      attach,
      estimateddate,
      warrantyinfo,
      comment,
      partId,
    });
    setNewStatus(false);
  }

  async function deleteStatus(id: string) {
    try {
      fetch(`api/status/${id}`, {
        headers: {
          'Content-Type': 'application/json',
        },
        method: 'DELETE',
      }).then(() => {
        refreshData();
      });
    } catch (error) {
      console.log(error);
    }
  }

  function handleCancel() {
    setForm({
      id: '',
      mstatus: '',
      category: '',
      from: '',
      to: '',
      performby: '',
      attach: '',
      estimateddate: '',
      warrantyinfo: '',
      comment: '',
      partId: '',
    });
    setNewStatus(true);
  }

  return (
    <div className="bg-black">
      <Head>
        <title>Asset Status</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <button onClick={openModal} className="bg-blue-500 text-white rounded p-1">
        Open Popup Form
      </button>

      <Modal
        isOpen={isModalOpen}
        onRequestClose={closeModal}
        contentLabel="Popup Form"
        className="modal" // Add your own custom CSS class for styling
        overlayClassName="overlay" // Add your own custom CSS class for styling
      >
        {step === 1 && (
          <form
            className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
            onSubmit={(e) => {
              e.preventDefault();
              if (form.mstatus && form.category) {
                // Proceed with the submission
                nextStep();
              } else {
                // Show an alert message if inputs are missing
                alert('Please fill in Part Name and Part ID fields.');
              }
            }}
          >
            <h1 className="text-center font-bold text-2xl m-4 text-white">Status</h1>
            {/* ... Rest of Step 1 form content */}
          </form>
        )}

        {step === 2 && (
          <form
            className="w-auto min-w-[30%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
            onSubmit={(e) => {
              e.preventDefault();
              if (form.warrantyinfo) {
                // Proceed with the submission
                handleSubmit(form); // This handles both create and update
                nextStep();
                prevStep();
              } else {
                // Show an alert message if inputs are missing
                alert('Please fill in Quantity and Description fields.');
              }
            }}
          >
            <h1 className="text-center font-bold text-2xl m-4 text-white">Part</h1>
            {/* ... Rest of Step 2 form content */}
          </form>
        )}

        {/* Add a close button */}
        <button onClick={closeModal} className="bg-gray-400 text-white rounded p-1">
          Close
        </button>
      </Modal>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  // READ all mstatus from DB
  const statuss = await prisma?.status.findMany({
    select: {
      id: true,
      mstatus: true,
      category: true,
      from: true,
      to: true,
      performby: true,
      attach: true,
      estimateddate: true,
      warrantyinfo: true,
      comment: true,
      partId: true,
      part: true,
    },
  });

  const parts = await prisma?.part.findMany({
    select: {
      name: true,
      idp: true,
      id: true,
      quantity: true,
      description: true,
    },
  });

  // Check if the parts array is empty
  const noParts = parts.length === 0;

  return {
    props: {
      parts: parts || [],
      noParts: noParts, // Add a flag to indicate if there are no parts
    },
  };
};
