import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { prisma } from '../../lib/prisma';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';

interface FormData {
  name: string;
  idp: string;
  quantity: string;
  description: string;
  id: string;
}

interface Notes {
  notes: {
    id: string;
    name: string;
    idp: string;
    quantity: string;
    description: string;
  }[];
}

const Home: NextPage<Notes> = ({ notes }) => {
  const [form, setForm] = useState<FormData>({
    name: '',
    idp: '',
    quantity: '',
    description: '',
    id: '',
  });
  const [newNote, setNewNote] = useState(true);
  const router = useRouter();
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const refreshData = () => {
    router.replace(router.asPath)
  }
  
  function openEditModal(note: FormData) {
    setForm(note);
    setIsEditModalOpen(true);
  }

  function closeEditModal() {
    setIsEditModalOpen(false);
    setForm({
      name: '',
      idp: '',
      quantity: '',
      description: '',
      id: '',
    });
    setNewNote(true);
  }

  async function handleSubmit(data: FormData) {
    try {
      if (newNote) {
        if (data.name && data.idp) {
          // CREATE logic
          fetch('api/create', {
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json',
            },
            method: 'POST',
          }).then(() => {
            setForm({
              name: '',
              idp: '',
              quantity: '',
              description: '',
              id: '',
            });
            refreshData();
            router.push('/dashboard');
          });
        } else {
          alert('Part Name and ID can not be blank');
        }
      } else {
        // UPDATE logic
        fetch(`api/note/${data.id}`, {
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'PUT',
        }).then(() => {
          setForm({
            name: '',
            idp: '',
            quantity: '',
            description: '',
            id: '',
          });
          setNewNote(true);
          refreshData();
          router.push('/dashboard');
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function updateNote(
    name: string,
    idp: string,
    quantity: string,
    description: string,
    id: string
  ) {
    setForm({ name, idp, quantity, description, id });
    setNewNote(false);
    openEditModal({
      name,
      idp,
      quantity,
      description,
      id,
    });
  }

  async function deleteNote(id: string) {
    try {
        fetch(`api/note/${id}`, {
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'DELETE'
        }).then(() => {
          refreshData()
        })
      } catch (error) {
        console.log(error)
      }    
  }

  function handleCancel() {
    setForm({
      name: '',
      idp: '',
      quantity: '',
      description: '',
      id: '',
    });
    setNewNote(true);
  }

  return (
    <div className="">
      <Head>
        <title>Parts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

    <div className="bg-gray-100 min-h-screen">
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-center font-bold text-2xl my-4">Parts</h1>
      <table className="w-full bg-white shadow-md rounded-md">
        <tbody>
          {notes.map((note) => (
            <tr key={note.id}>
              <td>{note.name}</td>
              <td>{note.idp}</td>
              <td>{note.quantity}</td>
              <td>{note.description}</td>
              <td>
                <button onClick={() => updateNote(note.name, note.idp, note.quantity, note.description, note.id)}>Edit</button>
                <button onClick={() => deleteNote(note.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {isEditModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
          <div className="bg-white shadow-md p-4 rounded-md">
            <form
              className="space-y-4"
              onSubmit={e => {
                e.preventDefault();
                handleSubmit(form);
                closeEditModal();
              }}
            >
              {/* ... form inputs ... */}
              <div className="flex justify-end">
                <button type="submit" className="bg-blue-500 text-white rounded px-4 py-2">
                  Save
                </button>
                <button type="button" onClick={closeEditModal} className="ml-2 bg-gray-300 rounded px-4 py-2">
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  </div>
  </div>
);
}

export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
    // READ all notes from DB
    const notes = await prisma?.note.findMany({
      select: {
        name: true,
        idp: true,
        id: true,
        quantity: true,
        description: true,
      }
    });
  
    return {
      props: {
        notes: notes || [], // Ensure that notes is initialized even if it's null
      }
    };
  };
  