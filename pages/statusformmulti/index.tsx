import type { NextPage } from 'next'
import Head from 'next/head'
import { useState } from 'react'
import { prisma } from '../../lib/prisma'
import { GetServerSideProps } from 'next'
import { useRouter } from 'next/router'
import { useForm } from './hook'; 



interface FormData {
  id:string
  mstatus: string
  category: string
  from: string
  to:string
  performby: string
  attach: string
  estimateddate: string
  warrantyinfo: string
  comment: string

}

// Array interface
interface Status {
  status: {
  id:string
  mstatus: string
  category: string
  from: string
  to:string
  performby: string
  attach: string
  estimateddate: string
  warrantyinfo: string
  comment: string
  }[]
}

// Load mstatus from getServerSideProps server side rendering
const Home: NextPage<Status> = ({ status }) => {
  const { step, form, setForm, nextStep, prevStep, resetForm } = useForm();
  const [newStatus, setNewStatus] = useState<Boolean>(true);
  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath)
  }

  async function handleSubmit(data: FormData) {
    try {
      if (newStatus) {
        if (data.mstatus) {
          // CREATE
          fetch('api/statuscreate', {
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json'
            },
            method: 'POST'
          }).then(() => {
            setForm({id:'', mstatus:'', category:'', from:'', to:'', performby:'', attach:'', estimateddate:'', warrantyinfo:'', comment:''});
            refreshData();
            router.push('/statusformmulti'); // Redirect to the dashboard page
          });
        } else {
          alert("Part status can not be blank");
        }
      } else {
        // UPDATE
        fetch(`api/status/${data.id}`, {
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json',
          },
          method: 'PUT'
        }).then(() => {
          setForm({ id:'', mstatus:'', category:'', from:'', to:'', performby:'', attach:'', estimateddate:'', warrantyinfo:'', comment:'' });
          setNewStatus(true);
          refreshData();
          router.push('/statusformmulti'); // Redirect to the dashboard page
        });
      }
    } catch (error) {
      console.log(error);
    }
  }
  

  async function updateStatus(
    id: string,
    mstatus: string,
    category: string,
    from: string,
    to:string,
    performby: string,
    attach: string,
    estimateddate: string,
    warrantyinfo: string,
    comment: string,
  ) {
    console.log("updateMstatus called"); // Add this line
    setForm({ 
      id, 
      mstatus, 
      category, 
      from, 
      to,    
      performby, 
      attach, 
      estimateddate, 
      warrantyinfo, 
      comment });
    setNewStatus(false);
  }
  

  async function deleteStatus(id: string) {
    try {
      fetch(`api/status/${id}`, {
        headers: {
          'Content-Type': 'application/json',
        },
        method: 'DELETE'
      }).then(() => {
        refreshData()
      })
    } catch (error) {
      console.log(error)
    }    
  }

  function handleCancel() {
    setForm({id:'',mstatus:'', category:'', from:'', to:'', performby:'', attach:'', estimateddate:'', warrantyinfo:'', comment:''})
    setNewStatus(true)
  }

  return (
    <div className='bg-black'>
      <Head>
        <title>Asset Status</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      {step === 1 && (
        <form
          className="w-auto min-w-[25%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
          onSubmit={e => {
            e.preventDefault();
            if (form.mstatus && form.category) {
              // Proceed with the submission
              
              nextStep();
            } else {
              // Show an alert message if inputs are missing
              alert("Please fill in Part Name and Part ID fields.");
            }
          }}
        >
      <h1 className="text-center font-bold text-2xl m-4 text-white">Status</h1>
      <label htmlFor="underline_select" className="w-100 h-1 text-white">Status</label>
      <select id="underline_select" value={form.mstatus} onChange={e => setForm({ ...form, mstatus: e.target.value })} 
        required className="block py-2.5 px-0 w-full text-m text-gray-500 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-white dark:border-gray-700 focus:outline-none focus:ring-0 focus:border-gray-200 peer placeholder-gray-400 text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
          <option className="bg-gray-600" selected>Choose a Status</option>                
          <option className="bg-gray-600" value="In service">In service</option>
          <option className="bg-gray-600" value="Scheduled for Maintenance">Scheduled for Maintenance</option>
          <option className="bg-gray-600" value="Under Maintenance">Under Maintenance</option>
          <option className="bg-gray-600" value="Maintenance Overdue">Maintenance Overdue</option>
          <option className="bg-gray-600" value="Out of service">Out of service</option>
          <option className="bg-gray-600" value="Removed from site">Removed from site</option>
          <option className="bg-gray-600" value="Taken Offline">Taken Offline</option>
          <option className="bg-gray-600" value="Decommissioned">Decommissioned</option>
          <option className="bg-gray-600" value="Permanently Damaged">Permanently Damaged</option>
          <option className="bg-gray-600" value="Awaiting Parts">Awaiting Parts</option>
          <option className="bg-gray-600" value="Up for Disposal">Up for Disposal</option>
          <option className="bg-gray-600" value="Retired">Retired</option>
          <option className="bg-gray-600" value="On Standby/Backup">On Standby/Backup</option>
          <option className="bg-gray-600" value="Scheduled for Maintenance">Scheduled for Maintenance</option>
          <option className="bg-gray-600" value="Undergoing Testing/Calibration">Undergoing Testing/Calibration</option>
          <option className="bg-gray-600" value="Under Warranty">Under Warranty</option>
      </select>

      <h1 className="text-center font-bold text-2xl m-4 text-white">Maintain Schedule</h1>
      <label htmlFor="underline_select" className="w-100 h-1 text-white">Category of Maintenance</label>
      <select id="underline_select" value={form.category} onChange={e => setForm({ ...form, category: e.target.value })} 
        className="block py-2.5 px-0 w-full text-m text-gray-500 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-white dark:border-gray-700 focus:outline-none focus:ring-0 focus:border-gray-200 peer placeholder-gray-400 text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
          <option className="bg-gray-600" selected>Choose a Type</option>                
          <option className="bg-gray-600" value="Preventive Maintenance (PM)">Preventive Maintenance (PM)</option>
          <option className="bg-gray-600" value="Predictive Maintenance (PdM)">Predictive Maintenance (PdM)</option>
          <option className="bg-gray-600" value="Coorective Maintenance">Coorective Maintenance</option>
          <option className="bg-gray-600" value="Emergency Maintenance">Emergency Maintenance</option>
          <option className="bg-gray-600" value="Reliability Centered Maintenance (RCM)">Reliability Centered Maintenance (RCM)</option>
          <option className="bg-gray-600" value="Routine Maintenance">Routine Maintenance</option>
          <option className="bg-gray-600" value="Seasonal Maintenance">Seasonal Maintenance</option>
          <option className="bg-gray-600" value="Overhaul Maintenance">Overhaul Maintenance</option>
          <option className="bg-gray-600" value="Risk-Based Maintenance (RBM)">Risk-Based Maintenance (RBM)</option>
      </select>

      <div className="field field_v2">
        <label htmlFor="from" className="">From</label>
          <input id="from" 
            type="date"            
            value={form.from} 
            onChange={e => setForm({...form, from: e.target.value})} 
            className="field__input -webkit-calendar-picker-indicator" 
          />
      </div>
      <br></br>

      <div className="field field_v2">
        <label htmlFor="to" className="">To</label>
          <input id="to" 
            type="date"              
            value={form.to} 
            onChange={e => setForm({...form, to: e.target.value})} 
            className="field__input -webkit-calendar-picker-indicator" 
        />
      </div>

      <div className="field field_v1">
        <label htmlFor="performby" className="w-1 h-1 p-0 border-0 absolute clip w-[1px] h-[1px] overflow-hidden">Performed By</label>
          <input type="text" 
            placeholder="Enter Company name" 
            value={form.performby} 
            onChange={e => setForm({...form, performby: e.target.value})}
            className="field__input"
          />
          <span className="absolute inset-0 pointer-events-none cursor-text field__label-wrap">
            <span className="field__label">Performed By</span>
          </span>
      </div>

      <div className="flex items-center justify-center w-full">
        <label htmlFor="dropzone-file" className="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
          <div className="flex flex-col items-center justify-center pt-5 pb-6">
              <svg className="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                  <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
              </svg>
              <p className="mb-2 text-sm text-gray-500 dark:text-gray-400"><span className="font-semibold">Click to upload</span> or drag and drop</p>
              <p className="text-xs text-gray-500 dark:text-gray-400">SVG, PNG, JPG or GIF (MAX. 800x400px)</p>
          </div>
          <input id="dropzone-file" 
            type="file" 
            className="hidden" 
            value={form.attach} 
            onChange={e => setForm({...form, attach: e.target.value})}/>
        </label>
      </div> 

      <div className="field field_v2">
        <label htmlFor="from" className="">Estimated Date for Next Maintenance</label>
          <input id="Estimated Date" 
            type="date"            
            value={form.estimateddate} 
            onChange={e => setForm({...form, estimateddate: e.target.value})} 
            className="field__input -webkit-calendar-picker-indicator" 
          />
      </div>



        
          
        <button type="submit" className="bg-blue-500 text-white rounded p-1">
            Next
        </button>
        <br/>
        </form>
      )}

{step === 2 && (
  <form
    className="w-auto min-w-[30%] max-w-min mx-auto space-y-6 flex flex-col items-stretch"
    onSubmit={e => {
      e.preventDefault();
      if (form.warrantyinfo) {
        // Proceed with the submission
        handleSubmit(form); // This handles both create and update
        nextStep();
      } else {
        // Show an alert message if inputs are missing
        alert("Please fill in Quantity and Description fields.");
      }
    }}
  >

    <h1 className="text-center font-bold text-2xl m-4 text-white">Part</h1>
        <label htmlFor="name" className="w-100 h-1 text-white">
          Warranty Information
        </label>

        <textarea
          placeholder="Write the warranty information here ......"
          value={form.warrantyinfo}
          onChange={e => setForm({ ...form, warrantyinfo: e.target.value })}
          className="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        />

        <label htmlFor="name" className="w-100 h-1 text-white">
          Noteds/Comments
        </label>

        <textarea
          placeholder="Write the comments here ......"
          value={form.comment}
          onChange={e => setForm({ ...form, comment: e.target.value })}
          className="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        />
  

    
    <button
      type="submit"
      className="bg-blue-500 text-white rounded p-1"
    >
      Submit
    </button>
    <button
      type="button"
      onClick={prevStep}
      className="bg-gray-400 text-white rounded p-1"
    >
      Back
    </button>
  </form>
)}
  </div>
  );
}

export default Home

export const getServerSideProps: GetServerSideProps = async () => {
  // READ all mstatus from DB
  const statuss = await prisma?.status.findMany({
    select: {
      id: true,
      mstatus: true,
      category: true, 
      from: true, 
      to: true,
      performby: true, 
      attach:true, 
      estimateddate:true,
      warrantyinfo:true, 
      comment:true,
    }
  });

  return {
    props: {
      statuss: statuss || [], // Ensure that mstatus is initialized even if it's null
    }
  };
};
